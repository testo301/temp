
# Initializing a controller object
# All provided vehicle parameters were implemented, however not all all needed in practice for the simulator

self.controller = Controller(vehicle_mass=vehicle_mass, fuel_capacity=fuel_capacity, brake_deadband=brake_deadband,decel_limit = decel_limit, accel_limit=accel_limit,wheel_radius=wheel_radius,wheel_base=wheel_base,steer_ratio = steer_ratio,max_lat_accel=max_lat_accel,max_steer_angle=max_steer_angle)

# Subscribing to relevant topics
# Subscribing to the velocity parameter
rospy.Sibscriber('/current_velocity',TwistStamped,self.velocity_cb)
# Subscribing to the twist command
rospy.Subscriber('/twist_cmd',TwistStamped,self.twist_cb)

# Subscribing to the manual flag
rospy.Subscriber('/vehicle/dbw_enabled',Bool,self.dbw_enabled_cb)

Initializing manual control flag
self.dbw_enabled = None

# Initializing vehicle control parameters
self.throttle = 0
self.steering = 0
self.brake = 0

# Initializing velocity parameters
self.current_vel = None
self.curr_ang_vel = None
self.linear_vel = None
self.angular_vel = None

# Tutaj self.loop()


# def loop(self):

# while not rospy.is_shutdown():
# indent here
if not None in (self.current_vel, self.linear_vel, self.angular_vel):
	self.throttle,self.brake,self.steering=self.controller.control( self.current_vel, self.dbw_enabled, self.linear_vel, self.angular_vel)


if self.dbw_enabled:
	self.publish(self.throttle,self.brake,self.steering)

#rate.sleep()


def dbw_enabler_cb(self,msg):
	self.dbw_enabled=msg

def twist_cb(self,msg):
	self.linear_vel = msg.twist.linear.x
	self.angular_vel=msg.twist.angular.z

def velocity_cb(self,msg):
	self.current_vel = msg.twist.linear.x


# Potem publisher i pozostale rzeczy
