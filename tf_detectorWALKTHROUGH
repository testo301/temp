    def waypoints_cb(self,waypoints):
        self.waypoints=waypoints
        if not self.waypoints_2d:
            self.waypoints_2d =  [[waypoint.pose.pose.position.x,waypoint.pose.pose.position.y] for waypoint in waypoints.waypoints]
            self.waypoint_tree = KDTree(self.waypoints_2d)


    # def get_closest waypoint
        closest_idx=self.waypoint_tree.query([x,y],1)[1]
        return closest_idx


    # def process_traffic_lights(self):
        closest_light=None
        line_wp_idx=None
        # Lists of positions that correspond to the line to stop in fron of for a given intersection
        stop_line_positions=self.config['stop_line_positions']
        if(self.pose):
            car_wp_idx=self.get_closest_waypoint(self.pose.pose.position.x,self.pose.pose.position.y)
            # w orginale bylo pose.pose moze zostawic?
            #TODO find the closest visible traffic light (if one exists)
            diff=len(self.waypoints.waypoints)
            for i,light in enumerate(self.lights):
                #Get stop line waypoint index
                line=stop_line_position[i]
                temp_wp_idx=self.get_closest_waypoint(line[0],line[1])
                # Find closest stop line waypoint index
                d=temp_wp_idx-car_wp_idx
                if d>=0 and d<diff:
                    diff=d
                    closest_light = light
                    line_wp_idx=temp_wp_idx
        if closest_light:
            state=self.get_light_state(closest_light)
            return line_wp_idx, state
        return -1, TrafficLight.UNKNOWN





# def get_light state
        return light.state

