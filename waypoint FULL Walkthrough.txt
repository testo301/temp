    self.base_lane=None
    self.stopline_wp_idx = -1




    # Add new subscriber
    rospy.Subscriber('/traffic_waypoint', Int32, self.traffic_cb)


    # Replace callback
    def traffic_cb(self,msg):
        self.stopline_wp_idx=msg.data



    # Replace old def publish_waypoints
    def publish_waypoints(self):
        final_lane=self.generate_lane()
        self.final_waypoints_pub.publish(final_lane)

    def generate_lane(self):
        lane=Lane()
        closest_idx=self.get_closest_waypoint_idx()
        farthest_idx=closest_idx+LOOKAHEAD_WPS
        base_waypoints=self.base_lane.waypoints[closest_idx:farthest_idx]
        if self.stopline_wp_idx == -1 or (self.stopline_wp_idx >= farthest_idx):
            lane.waypoints=base_waypoints
        else:
            lane.waypoints=self.decelerate_waypoints(base_waypoints,closest_idx)
        return lane


    def decelerate_waypoints(self,waypoints,closest_idx):
        temp=[]
        for i,wp in enumerate(waypoints):
            p=Waypoint()
            p.pose=wp.pose
            stop_idx=max(self.stopline_wp_idx-closest_idx-2,0) #two waypoints back from line so front of car stops at line
            dist = self.distance(waypoints,i,stop_idx)
            vel=math.sqrt(2*MAX_DECEL*dist)
            if vel<1.:
                vel=0.

            p.twist.twist.linear.x=min(vel,wp.twist.twist.linear.x)
            temp.append(p)
        return temp
