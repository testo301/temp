#!/usr/bin/env python
import rospy
import numpy as np
from std_msgs.msg import Int32
from geometry_msgs.msg import PoseStamped, Pose
from styx_msgs.msg import TrafficLightArray, TrafficLight
from styx_msgs.msg import Lane
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
from light_classification.tl_classifier import TLClassifier
import tf
import cv2
import yaml


from scipy.spatial import KDTree


STATE_COUNT_THRESHOLD = 3

class TLDetector(object):
    def __init__(self):
        rospy.init_node('tl_detector')

        self.pose = None
        self.waypoints = None
        self.camera_image = None
        self.lights = []
        self.pub_light=None
        self.lights_2d=None
        self.waypoints_2d = None
        self.waypoint_tree = None
        # Counter for processing every 5th image from camera
        self.counter_processing = 1
        # temp var
        self.temp_class = None
        self.inside_state_loop = None
        self.inside_state = None

        sub1 = rospy.Subscriber('/current_pose', PoseStamped, self.pose_cb)
        sub2 = rospy.Subscriber('/base_waypoints', Lane, self.waypoints_cb)

        '''
        /vehicle/traffic_lights provides you with the location of the traffic light in 3D map space and
        helps you acquire an accurate ground truth data source for the traffic light
        classifier by sending the current color state of all traffic lights in the
        simulator. When testing on the vehicle, the color state will not be available. You'll need to
        rely on the position of the light and the camera image to predict it.
        '''
        sub3 = rospy.Subscriber('/vehicle/traffic_lights', TrafficLightArray, self.traffic_cb)
        sub6 = rospy.Subscriber('/image_color', Image, self.image_cb)

        config_string = rospy.get_param("/traffic_light_config")
        self.config = yaml.load(config_string)

        self.upcoming_red_light_pub = rospy.Publisher('/traffic_waypoint', Int32, queue_size=1)

        self.bridge = CvBridge()
        self.light_classifier = TLClassifier()
        self.listener = tf.TransformListener()

        self.state = TrafficLight.UNKNOWN
        self.last_state = TrafficLight.UNKNOWN
        self.last_wp = -1
        self.state_count = 0

        self.line_wp_idx_temp  = None



        # Closest vehicle waypoint
        self.closest_idx_temp = None

        self.line_wp_idx_temp2 = None

        # Closest light waypoint
        self.light_wp_temp = None


        self.temp_var = None
        self.temp_var2 = None
        self.temp_var3 = None
        self.temp_var4 = None
        self.temp_var5 = None
        self.ith=None
        self.lights_2d = None
        self.temp_line = None
        #rospy.spin()

        # To be deleted
        self.flag_enter = None
        self.intheloop = None
        self.flag_image_cb  = None
        self.closest_light_temp = None
        self.temp_condition = None
        #self.current_counter = None



        self.loop()

    def loop(self):
        rate=rospy.Rate(10)
        while not rospy.is_shutdown():
            #rospy.logerr("Out of if condition :%s",self.pub_light)
            #rospy.logerr("Stop line positions :%s",self.config['stop_line_positions'])
            #rospy.logerr("Out of if condition :%s",self.temp_var2)
            #rospy.logerr("Out of if condition :%s",self.pose)
            #rospy.logerr("Out of if condition :%s",self.temp_var4)
            #rospy.logerr("Out of if condition :%s",self.temp_var5)

            #rospy.logerr("Light state :%s",self.state)

            #rospy.logerr("Light 2D :%s",self.lights_2d)
            #rospy.logerr("Light 2D :%s",self.waypoint_tree)
            #rospy.logerr("Light 2D :%s",self.closest_idx_temp )
            #rospy.logerr("Light 2D :%s",self.intheloop )
            #rospy.logerr("Light 2D :%s",self.flag_enter)
            #rospy.logerr("Image cb flag :%s",self.flag_image_cb )
            #rospy.logerr("In the loop  :%s",self.intheloop )
            
            
            
            #if self.light_wp_temp and self.closest_idx_temp  and ( self.light_wp_temp  - self.closest_idx_temp < 70):
            #    rospy.logerr("Close light")

            
            
            #rospy.logerr("Light state :%s",self.waypoints_2d)
            #rospy.logerr("Light waypoint :%s",self.line_wp_idx_temp)
            #rospy.logerr("Light waypoint :%s",self.light_wp_temp)


            #rospy.logerr("Vehicle waypoint :%s",self.closest_idx_temp)
            #rospy.logerr("Light waypoint :%s",self.line_wp_idx_temp2)
            #rospy.logerr("Light waypoint :%s",self.closest_light_temp )



            #rospy.logerr("Temp Condition :%s",self.temp_condition)
            #rospy.logerr("Flag enter :%s",self.flag_enter)
            #rospy.logerr("Current counter :%s",self.current_counter)
            

            
            



            #rospy.logerr("Light waypoint :%s",self.temp_class)

            #rospy.logerr("Inside state loop :%s",self.inside_state_loop)
            # Last log
            #rospy.logerr("Inside state :%s",self.inside_state)

            
            

            #if self.pose:
            #    rospy.logerr("Pose position X :%s",self.pose.pose.position.x)
            
            #rospy.logerr("Waypoints :%s",self.waypoints)
            
            # self.lights jest OK
            #rospy.logerr("Self lights :%s",self.lights)
            #rospy.logerr("Enum :%s",self.lights)
            #rospy.logerr("2D :%s",self.lights_2d)
            #rospy.logerr("Enum :%s",enumerate(self.lights_2d))
            #if self.lights_2d:
            #    rospy.logerr("Enum :%s",enumerate(self.lights_2d))            
            #rospy.logerr("Ith :%s",self.ith)
            #rospy.logerr("Enum :%s",self.lights_2d)
            #rospy.logerr("Enum :%s",self.config['stop_line_positions'])
            #rospy.logerr("Temp line :%s",self.temp_line)
            #rospy.logerr("Temp line :%s",self.flag_enter)
            

            # self.config['stop_line_positions'] jest OK
            #rospy.logerr("Stop Line :%s",self.config['stop_line_positions'])
            # self.config['stop_line_positions'] jest OK
            #rospy.logerr("Stop Line :%s",self.config['stop_line_positions'][2])       
            
            #rospy.logerr("Out of if condition :%s",self.ith)

            if self.pose and self.pub_light:
                self.publish_light()
                #rospy.logerr("Light :%s",self.pub_light)
                self.flag_image_cb = 1



                

            rate.sleep()


    def publish_light(self):
        self.upcoming_red_light_pub.publish(self.pub_light)

        # UNCOMMENT
        #if self.pub_light == Int32(-1):
        #    rospy.logwarn("Green or Unknown")
        #else:
        #    rospy.logwarn("Red or Yellow")


    def pose_cb(self, msg):
        self.pose = msg

    def waypoints_cb(self, waypoints):
        self.waypoints = waypoints
        if not self.waypoints_2d:
            self.waypoints_2d =  [[waypoint.pose.pose.position.x,waypoint.pose.pose.position.y] for waypoint in waypoints.waypoints]
            self.waypoint_tree = KDTree(self.waypoints_2d)



    def traffic_cb(self, msg):
        self.lights = msg.lights


        self.lights_2d  = [[lght.pose.pose.position.x, lght.pose.pose.position.y] for lght in msg.lights]
        

        #self.base_waypoints = waypoints
        #self.base_lane=waypoints
        #if not self.waypoints_2d:
       #     self.waypoints_2d = [[waypoint.pose.pose.position.x, waypoint.pose.pose.position.y] for waypoint in waypoints.waypoints]




    def image_cb(self, msg):
        """Identifies red lights in the incoming camera image and publishes the index
            of the waypoint closest to the red light's stop line to /traffic_waypoint

        Args:
            msg (Image): image from car-mounted camera

        """
        #rospy.rostime.wallsleep(1)
        self.flag_image_cb = 1

        self.has_image = True
        self.camera_image = msg
        light_wp, state = self.process_traffic_lights()

        self.light_wp_temp = light_wp
        self.counter_processing += 1

        '''
        Publish upcoming red lights at camera frequency.
        Each predicted state has to occur `STATE_COUNT_THRESHOLD` number
        of times till we start using it. Otherwise the previous stable state is
        used.
        '''
        if self.state != state:
            self.state_count = 0
            self.state = state
        elif self.state_count >= STATE_COUNT_THRESHOLD:
            self.last_state = self.state
            light_wp = light_wp if state == TrafficLight.RED else -1
            self.last_wp = light_wp
            self.upcoming_red_light_pub.publish(Int32(light_wp))
            self.pub_light=Int32(light_wp)
        else:
            self.upcoming_red_light_pub.publish(Int32(self.last_wp))
            self.pub_light=Int32(self.last_wp)
        self.state_count += 1
        #rospy.logerr(">>Current light: %s",state)

    #def get_closest_waypoint(self, pose):
    def get_closest_waypoint(self, x,y):   
        """Identifies the closest path waypoint to the given position
            https://en.wikipedia.org/wiki/Closest_pair_of_points_problem
        Args:
            pose (Pose): position to match a waypoint to

        Returns:
            int: index of the closest waypoint in self.waypoints

        """
        #TODO implement
        #return 0
        if self.waypoint_tree:
            #closest_idx=self.waypoint_tree.query([x,y],1)[1]
            #self.closest_idx_temp = closest_idx



            #return closest_idx

            # Alternative
            closest_point=self.waypoint_tree.query([x,y],1)[1]
            closest_xy = np.array(self.waypoints_2d[closest_point])
            prev_xy = np.array(self.waypoints_2d[closest_point-1])
            current_xy = np.array([x,y])
            dotproduct = np.dot(closest_xy-prev_xy,current_xy-closest_xy)
            if dotproduct > 0:
                closest_point = (closest_point+1)%len(self.waypoints_2d)
            return closest_point



    def get_light_state(self, light):
        """Determines the current color of the traffic light

        Args:
            light (TrafficLight): light to classify

        Returns:
            int: ID of traffic light color (specified in styx_msgs/TrafficLight)

        """

        # UNCOMMENT LATER!
        if(not self.has_image):
            self.prev_light_loc = None
            return False

        cv_image = self.bridge.imgmsg_to_cv2(self.camera_image, "bgr8")
        #self.temp_var = light.state
        #self.temp_var2=self.light_classifier.get_classification(cv_image)
        #self.temp_class = self.light_classifier.get_classification(cv_image)


        #Get classification
        return self.light_classifier.get_classification(cv_image)
        #return self.temp_class


        #return light.state





    def process_traffic_lights(self):
        """Finds closest visible traffic light, if one exists, and determines its
            location and color

        Returns:
            int: index of waypoint closes to the upcoming stop line for a traffic light (-1 if none exists)
            int: ID of traffic light color (specified in styx_msgs/TrafficLight)

        """
        #light = None

        # List of positions that correspond to the line to stop in front of for a given intersection
        #stop_line_positions = self.config['stop_line_positions']
        #if(self.pose):
        #    car_position = self.get_closest_waypoint(self.pose.pose)

        #TODO find the closest visible traffic light (if one exists)

        #if light:
        #    state = self.get_light_state(light)
        #    return light_wp, state
        #self.waypoints = None
        #return -1, TrafficLight.UNKNOWN


        self.flag_enter = 1

        # New version
        closest_light=None
        line_wp_idx=None
        # Lists of positions that correspond to the line to stop in fron of for a given intersection
        stop_line_positions=self.config['stop_line_positions']
        #if(self.pose and  self.lights_2d):
        if(self.pose and  self.lights_2d and self.waypoints):    
        #if(self.pose ):
            self.intheloop=1
            car_wp_idx=self.get_closest_waypoint(self.pose.pose.position.x,self.pose.pose.position.y)
            self.closest_idx_temp = car_wp_idx
            # w orginale bylo pose.pose moze zostawic?
            #TODO find the closest visible traffic light (if one exists)

            #self.di

            diff=len(self.waypoints.waypoints)

            for i, light in enumerate(self.lights):
            #for i, light in enumerate(self.lights_2d):

                #Get stop line waypoint index
                self.ith = i
                line=stop_line_positions[i]
                self.temp_line = stop_line_positions[i]
                self.temp_var4 = line
                temp_wp_idx=self.get_closest_waypoint(line[0],line[1])
                #self.temp_var5 = temp_wp_idx
                # Find closest stop line waypoint index
                d=temp_wp_idx-car_wp_idx
                if d>=0 and d<diff:
                    diff=d
                    closest_light = light
                    line_wp_idx=temp_wp_idx
                    #self.temp_var3 = closest_light
                    self.line_wp_idx_temp2 = line_wp_idx
                    self.closest_light_temp = closest_light


        #if closest_light:
        # Alternative with lookadhead distance:
        #if closest_light and self.light_wp_temp and self.closest_idx_temp  and ( self.light_wp_temp  - self.closest_idx_temp < 70):
        #if closest_light and self.line_wp_idx_temp2 and self.closest_idx_temp  and ( self.line_wp_idx_temp2  - self.closest_idx_temp < 70):
        #    self.temp_condition = 1


        if closest_light and self.line_wp_idx_temp2 and self.closest_idx_temp  and ( self.line_wp_idx_temp2  - self.closest_idx_temp < 80) and (self.counter_processing % 3 == 0):
            state=self.get_light_state(closest_light)
            #self.inside_state_loop = 1
            self.inside_state = state
            #self.current_counter = self.counter_processing
            #rospy.logerr("Inside state :%s",self.inside_state)

            # Last log

            #rospy.logerr("Close light")
            #rospy.logerr("Light waypoint :%s",self.light_wp_temp)
            #rospy.logerr("Vehicle waypoint :%s",self.closest_idx_temp)


            self.line_wp_idx_temp = line_wp_idx

            return line_wp_idx, state
        return -1, TrafficLight.UNKNOWN




if __name__ == '__main__':
    try:
        TLDetector()
        #rospy.logerr("Self lights main :%s",self.lights)
    except rospy.ROSInterruptException:
        rospy.logerr('Could not start traffic node.')
