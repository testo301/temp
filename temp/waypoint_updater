#!/usr/bin/env python

import rospy
from geometry_msgs.msg import PoseStamped
from styx_msgs.msg import Lane, Waypoint
from std_msgs.msg import Int32

# IMPORTED
import numpy as np
import math

from scipy.spatial import KDTree

'''
This node will publish waypoints from the car's current position to some `x` distance ahead.

As mentioned in the doc, you should ideally first implement a version which does not care
about traffic lights or obstacles.

Once you have created dbw_node, you will update this node to use the status of traffic lights too.

Please note that our simulator also provides the exact location of traffic lights and their
current status in `/vehicle/traffic_lights` message. You can use this message to build this node
as well as to verify your TL classifier.

TODO (for Yousuf and Aaron): Stopline location for each traffic light.
'''

LOOKAHEAD_WPS = 200 # Number of waypoints we will publish. You can change this number
MAX_DECEL=0.5

class WaypointUpdater(object):



	def __init__(self):
		rospy.init_node('waypoint_updater')

		rospy.Subscriber('/current_pose', PoseStamped, self.pose_cb)
		rospy.Subscriber('/base_waypoints', Lane, self.waypoints_cb)
		rospy.Subscriber('/traffic_waypoint', Int32, self.traffic_cb)
		self.final_waypoints_pub = rospy.Publisher('final_waypoints', Lane, queue_size=1)
		self.base_lane = None
		self.stopline_wp_idx = -1
		self.pose = None
		self.base_waypoints = None
		self.waypoints_2d = None
		self.waypoint_tree = None


		rate=rospy.Rate(10)

		#while not rospy.core.is_shutdown():
		while not rospy.is_shutdown():	
			#if self.pose and self.base_waypoints:
			
			if self.pose and self.base_lane and self.waypoint_tree:
				#closest_waypoint_id = self.get_closest_waypoint_idx()
				#self.publish_waypoints(closest_waypoint_id)	
				#rospy.logerr("Closest waypoint :%s",closest_waypoint_id)
				self.publish_waypoints()
		#		rospy.logerr("Traffic light status :%s",self.stopline_wp_idx)
			#rospy.rostime.wallsleep(1)

			rate.sleep()
		
		#self.loop()


	def loop(self):
		rate=rospy.Rate(50)
		while not rospy.is_shutdown():
			if self.pose and self.base_lane:
				self.publish_waypoints()
			#rospy.logerr("Traffic light status :%s",self.stopline_wp_idx)

			rate.sleep()
	def get_closest_waypoint_idx(self):
		# Retrieving x,y coordinates from the message
	    x =  self.pose.pose.position.x
	    y =  self.pose.pose.position.y

	    # Capturing the closest point with the function closest()
	    #closest_point = self.closest(self.waypoints_2d,[x,y])

	    if self.waypoint_tree:
		    closest_point=self.waypoint_tree.query([x,y],1)[1]

		    # Broadcasting the closest ID to the console
		    # UNCOMMENT
		    #rospy.logerr("Closest waypoint Dotprod - closest_idx:%s",closest_point)
		    	    
		    # Using the hyperplane approach presented in Udacity 6. Waypoint Updater Partial Walkthrough
		    # Verifying if point is ahead of the vehicle
		    # Equation for hyperplane through closest coords
		    closest_xy = np.array(self.waypoints_2d[closest_point])
		    prev_xy = np.array(self.waypoints_2d[closest_point-1])
		    current_xy = np.array([x,y])
		    dotproduct = np.dot(closest_xy-prev_xy,current_xy-closest_xy)
		    if dotproduct > 0:
		        closest_point = (closest_point+1)%len(self.waypoints_2d)
		    return closest_point

	#def publish_waypoints(self,closest_id):
	def publish_waypoints(self):

	    #lane=Lane()
	    #lane.header=self.base_waypoints.header
	    #lane.waypoints=self.base_waypoints.waypoints[closest_id:closest_id+LOOKAHEAD_WPS]
	    #self.final_waypoints_pub.publish(lane)

		final_lane=self.generate_lane()
		self.final_waypoints_pub.publish(final_lane)

	def generate_lane(self):
		lane=Lane()
		closest_idx=self.get_closest_waypoint_idx()
		farthest_idx=closest_idx+LOOKAHEAD_WPS
		base_waypoints=self.base_lane.waypoints[closest_idx:farthest_idx]
		if self.stopline_wp_idx == -1 or (self.stopline_wp_idx >= farthest_idx):
			lane.waypoints=base_waypoints
		else:
			lane.waypoints=self.decelerate_waypoints(base_waypoints,closest_idx)
		return lane
	def decelerate_waypoints(self,waypoints,closest_idx):
		temp=[]
		for i,wp in enumerate(waypoints):
			p=Waypoint()
			p.pose=wp.pose
			stop_idx=max(self.stopline_wp_idx-closest_idx-2,0) #two waypoints back from line so front of car stops at line
			dist = self.distance(waypoints,i,stop_idx)
			vel=math.sqrt(2*MAX_DECEL*dist)
			if vel<1.:
				vel=0.

			p.twist.twist.linear.x=min(vel,wp.twist.twist.linear.x)
			temp.append(p)
		return temp

	def pose_cb(self, msg):
		self.pose = msg

	def waypoints_cb(self, waypoints):
		self.base_waypoints = waypoints
		self.base_lane=waypoints
		if not self.waypoints_2d:
			self.waypoints_2d = [[waypoint.pose.pose.position.x, waypoint.pose.pose.position.y] for waypoint in waypoints.waypoints]
			self.waypoint_tree=KDTree(self.waypoints_2d)

	def traffic_cb(self, msg):
		# TODO: Callback for /traffic_waypoint message. Implement
		#pass
		self.stopline_wp_idx=msg.data
		# UNCOMMENT
		#rospy.logerr("Message :%s",msg.data)

	def obstacle_cb(self, msg):
		# TODO: Callback for /obstacle_waypoint message. We will implement it later
		pass

	def get_waypoint_velocity(self, waypoint):
		return waypoint.twist.twist.linear.x

	def set_waypoint_velocity(self, waypoints, waypoint, velocity):
		waypoints[waypoint].twist.twist.linear.x = velocity

	def distance(self, waypoints, wp1, wp2):
		dist = 0
		dl = lambda a, b: math.sqrt((a.x-b.x)**2 + (a.y-b.y)**2  + (a.z-b.z)**2)
		for i in range(wp1, wp2+1):
			dist += dl(waypoints[wp1].pose.pose.position, waypoints[i].pose.pose.position)
			wp1 = i
		return dist
	def closest(self, wpts, wp):
		waypoint_array = np.asarray(wpts)
		delt = waypoint_array - wp
		distn = np.einsum('ij,ij->i',delt,delt)
		return np.argmin(distn)
if __name__ == '__main__':
	try:
		WaypointUpdater()
	except rospy.ROSInterruptException:
		rospy.logerr('Could not start waypoint updater node.')
